{"ast":null,"code":"'use client';\n\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { createElement, forwardRef, useState, useEffect } from 'react';\nvar defaultIconDimensions = Object.freeze({\n  left: 0,\n  top: 0,\n  width: 16,\n  height: 16\n});\nvar defaultIconTransformations = Object.freeze({\n  rotate: 0,\n  vFlip: false,\n  hFlip: false\n});\nvar defaultIconProps = Object.freeze(_objectSpread(_objectSpread({}, defaultIconDimensions), defaultIconTransformations));\nvar defaultExtendedIconProps = Object.freeze(_objectSpread(_objectSpread({}, defaultIconProps), {}, {\n  body: \"\",\n  hidden: false\n}));\nfunction mergeIconTransformations(obj1, obj2) {\n  var result = {};\n  if (!obj1.hFlip !== !obj2.hFlip) {\n    result.hFlip = true;\n  }\n  if (!obj1.vFlip !== !obj2.vFlip) {\n    result.vFlip = true;\n  }\n  var rotate = ((obj1.rotate || 0) + (obj2.rotate || 0)) % 4;\n  if (rotate) {\n    result.rotate = rotate;\n  }\n  return result;\n}\nfunction mergeIconData(parent, child) {\n  var result = mergeIconTransformations(parent, child);\n  for (var key in defaultExtendedIconProps) {\n    if (key in defaultIconTransformations) {\n      if (key in parent && !(key in result)) {\n        result[key] = defaultIconTransformations[key];\n      }\n    } else if (key in child) {\n      result[key] = child[key];\n    } else if (key in parent) {\n      result[key] = parent[key];\n    }\n  }\n  return result;\n}\nfunction getIconsTree(data, names) {\n  var icons = data.icons;\n  var aliases = data.aliases || /* @__PURE__ */Object.create(null);\n  var resolved = /* @__PURE__ */Object.create(null);\n  function resolve(name) {\n    if (icons[name]) {\n      return resolved[name] = [];\n    }\n    if (!(name in resolved)) {\n      resolved[name] = null;\n      var parent = aliases[name] && aliases[name].parent;\n      var value = parent && resolve(parent);\n      if (value) {\n        resolved[name] = [parent].concat(value);\n      }\n    }\n    return resolved[name];\n  }\n  (names || Object.keys(icons).concat(Object.keys(aliases))).forEach(resolve);\n  return resolved;\n}\nfunction internalGetIconData(data, name, tree) {\n  var icons = data.icons;\n  var aliases = data.aliases || /* @__PURE__ */Object.create(null);\n  var currentProps = {};\n  function parse(name2) {\n    currentProps = mergeIconData(icons[name2] || aliases[name2], currentProps);\n  }\n  parse(name);\n  tree.forEach(parse);\n  return mergeIconData(data, currentProps);\n}\nfunction parseIconSet(data, callback) {\n  var names = [];\n  if (_typeof(data) !== \"object\" || _typeof(data.icons) !== \"object\") {\n    return names;\n  }\n  if (data.not_found instanceof Array) {\n    data.not_found.forEach(function (name) {\n      callback(name, null);\n      names.push(name);\n    });\n  }\n  var tree = getIconsTree(data);\n  for (var name in tree) {\n    var item = tree[name];\n    if (item) {\n      callback(name, internalGetIconData(data, name, item));\n      names.push(name);\n    }\n  }\n  return names;\n}\nvar matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;\nvar stringToIcon = function stringToIcon(value, validate, allowSimpleName) {\n  var provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n  var colonSeparated = value.split(\":\");\n  if (value.slice(0, 1) === \"@\") {\n    if (colonSeparated.length < 2 || colonSeparated.length > 3) {\n      return null;\n    }\n    provider = colonSeparated.shift().slice(1);\n  }\n  if (colonSeparated.length > 3 || !colonSeparated.length) {\n    return null;\n  }\n  if (colonSeparated.length > 1) {\n    var name2 = colonSeparated.pop();\n    var prefix = colonSeparated.pop();\n    var result = {\n      // Allow provider without '@': \"provider:prefix:name\"\n      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,\n      prefix: prefix,\n      name: name2\n    };\n    return validate && !validateIconName(result) ? null : result;\n  }\n  var name = colonSeparated[0];\n  var dashSeparated = name.split(\"-\");\n  if (dashSeparated.length > 1) {\n    var _result = {\n      provider: provider,\n      prefix: dashSeparated.shift(),\n      name: dashSeparated.join(\"-\")\n    };\n    return validate && !validateIconName(_result) ? null : _result;\n  }\n  if (allowSimpleName && provider === \"\") {\n    var _result2 = {\n      provider: provider,\n      prefix: \"\",\n      name: name\n    };\n    return validate && !validateIconName(_result2, allowSimpleName) ? null : _result2;\n  }\n  return null;\n};\nvar validateIconName = function validateIconName(icon, allowSimpleName) {\n  if (!icon) {\n    return false;\n  }\n  return !!((icon.provider === \"\" || icon.provider.match(matchIconName)) && (allowSimpleName && icon.prefix === \"\" || icon.prefix.match(matchIconName)) && icon.name.match(matchIconName));\n};\nvar optionalPropertyDefaults = _objectSpread({\n  provider: \"\",\n  aliases: {},\n  not_found: {}\n}, defaultIconDimensions);\nfunction checkOptionalProps(item, defaults) {\n  for (var prop in defaults) {\n    if (prop in item && _typeof(item[prop]) !== _typeof(defaults[prop])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction quicklyValidateIconSet(obj) {\n  if (_typeof(obj) !== \"object\" || obj === null) {\n    return null;\n  }\n  var data = obj;\n  if (typeof data.prefix !== \"string\" || !obj.icons || _typeof(obj.icons) !== \"object\") {\n    return null;\n  }\n  if (!checkOptionalProps(obj, optionalPropertyDefaults)) {\n    return null;\n  }\n  var icons = data.icons;\n  for (var name in icons) {\n    var icon = icons[name];\n    if (!name.match(matchIconName) || typeof icon.body !== \"string\" || !checkOptionalProps(icon, defaultExtendedIconProps)) {\n      return null;\n    }\n  }\n  var aliases = data.aliases || /* @__PURE__ */Object.create(null);\n  for (var _name in aliases) {\n    var _icon = aliases[_name];\n    var parent = _icon.parent;\n    if (!_name.match(matchIconName) || typeof parent !== \"string\" || !icons[parent] && !aliases[parent] || !checkOptionalProps(_icon, defaultExtendedIconProps)) {\n      return null;\n    }\n  }\n  return data;\n}\nvar dataStorage = /* @__PURE__ */Object.create(null);\nfunction newStorage(provider, prefix) {\n  return {\n    provider: provider,\n    prefix: prefix,\n    icons: /* @__PURE__ */Object.create(null),\n    missing: /* @__PURE__ */new Set()\n  };\n}\nfunction getStorage(provider, prefix) {\n  var providerStorage = dataStorage[provider] || (dataStorage[provider] = /* @__PURE__ */Object.create(null));\n  return providerStorage[prefix] || (providerStorage[prefix] = newStorage(provider, prefix));\n}\nfunction addIconSet(storage, data) {\n  if (!quicklyValidateIconSet(data)) {\n    return [];\n  }\n  return parseIconSet(data, function (name, icon) {\n    if (icon) {\n      storage.icons[name] = icon;\n    } else {\n      storage.missing.add(name);\n    }\n  });\n}\nfunction addIconToStorage(storage, name, icon) {\n  try {\n    if (typeof icon.body === \"string\") {\n      storage.icons[name] = _objectSpread({}, icon);\n      return true;\n    }\n  } catch (err) {}\n  return false;\n}\nfunction listIcons(provider, prefix) {\n  var allIcons = [];\n  var providers = typeof provider === \"string\" ? [provider] : Object.keys(dataStorage);\n  providers.forEach(function (provider2) {\n    var prefixes = typeof provider2 === \"string\" && typeof prefix === \"string\" ? [prefix] : Object.keys(dataStorage[provider2] || {});\n    prefixes.forEach(function (prefix2) {\n      var storage = getStorage(provider2, prefix2);\n      allIcons = allIcons.concat(Object.keys(storage.icons).map(function (name) {\n        return (provider2 !== \"\" ? \"@\" + provider2 + \":\" : \"\") + prefix2 + \":\" + name;\n      }));\n    });\n  });\n  return allIcons;\n}\nvar simpleNames = false;\nfunction allowSimpleNames(allow) {\n  if (typeof allow === \"boolean\") {\n    simpleNames = allow;\n  }\n  return simpleNames;\n}\nfunction getIconData(name) {\n  var icon = typeof name === \"string\" ? stringToIcon(name, true, simpleNames) : name;\n  if (icon) {\n    var _storage = getStorage(icon.provider, icon.prefix);\n    var iconName = icon.name;\n    return _storage.icons[iconName] || (_storage.missing.has(iconName) ? null : void 0);\n  }\n}\nfunction addIcon(name, data) {\n  var icon = stringToIcon(name, true, simpleNames);\n  if (!icon) {\n    return false;\n  }\n  var storage = getStorage(icon.provider, icon.prefix);\n  return addIconToStorage(storage, icon.name, data);\n}\nfunction addCollection(data, provider) {\n  if (_typeof(data) !== \"object\") {\n    return false;\n  }\n  if (typeof provider !== \"string\") {\n    provider = data.provider || \"\";\n  }\n  if (simpleNames && !provider && !data.prefix) {\n    var added = false;\n    if (quicklyValidateIconSet(data)) {\n      data.prefix = \"\";\n      parseIconSet(data, function (name, icon) {\n        if (icon && addIcon(name, icon)) {\n          added = true;\n        }\n      });\n    }\n    return added;\n  }\n  var prefix = data.prefix;\n  if (!validateIconName({\n    provider: provider,\n    prefix: prefix,\n    name: \"a\"\n  })) {\n    return false;\n  }\n  var storage = getStorage(provider, prefix);\n  return !!addIconSet(storage, data);\n}\nfunction iconLoaded(name) {\n  return !!getIconData(name);\n}\nfunction getIcon(name) {\n  var result = getIconData(name);\n  return result ? _objectSpread(_objectSpread({}, defaultIconProps), result) : null;\n}\nvar defaultIconSizeCustomisations = Object.freeze({\n  width: null,\n  height: null\n});\nvar defaultIconCustomisations = Object.freeze(_objectSpread(_objectSpread({}, defaultIconSizeCustomisations), defaultIconTransformations));\nvar unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nvar unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\nfunction calculateSize(size, ratio, precision) {\n  if (ratio === 1) {\n    return size;\n  }\n  precision = precision || 100;\n  if (typeof size === \"number\") {\n    return Math.ceil(size * ratio * precision) / precision;\n  }\n  if (typeof size !== \"string\") {\n    return size;\n  }\n  var oldParts = size.split(unitsSplit);\n  if (oldParts === null || !oldParts.length) {\n    return size;\n  }\n  var newParts = [];\n  var code = oldParts.shift();\n  var isNumber = unitsTest.test(code);\n  while (true) {\n    if (isNumber) {\n      var num = parseFloat(code);\n      if (isNaN(num)) {\n        newParts.push(code);\n      } else {\n        newParts.push(Math.ceil(num * ratio * precision) / precision);\n      }\n    } else {\n      newParts.push(code);\n    }\n    code = oldParts.shift();\n    if (code === void 0) {\n      return newParts.join(\"\");\n    }\n    isNumber = !isNumber;\n  }\n}\nfunction splitSVGDefs(content) {\n  var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"defs\";\n  var defs = \"\";\n  var index = content.indexOf(\"<\" + tag);\n  while (index >= 0) {\n    var start = content.indexOf(\">\", index);\n    var end = content.indexOf(\"</\" + tag);\n    if (start === -1 || end === -1) {\n      break;\n    }\n    var endEnd = content.indexOf(\">\", end);\n    if (endEnd === -1) {\n      break;\n    }\n    defs += content.slice(start + 1, end).trim();\n    content = content.slice(0, index).trim() + content.slice(endEnd + 1);\n  }\n  return {\n    defs: defs,\n    content: content\n  };\n}\nfunction mergeDefsAndContent(defs, content) {\n  return defs ? \"<defs>\" + defs + \"</defs>\" + content : content;\n}\nfunction wrapSVGContent(body, start, end) {\n  var split = splitSVGDefs(body);\n  return mergeDefsAndContent(split.defs, start + split.content + end);\n}\nvar isUnsetKeyword = function isUnsetKeyword(value) {\n  return value === \"unset\" || value === \"undefined\" || value === \"none\";\n};\nfunction iconToSVG(icon, customisations) {\n  var fullIcon = _objectSpread(_objectSpread({}, defaultIconProps), icon);\n  var fullCustomisations = _objectSpread(_objectSpread({}, defaultIconCustomisations), customisations);\n  var box = {\n    left: fullIcon.left,\n    top: fullIcon.top,\n    width: fullIcon.width,\n    height: fullIcon.height\n  };\n  var body = fullIcon.body;\n  [fullIcon, fullCustomisations].forEach(function (props) {\n    var transformations = [];\n    var hFlip = props.hFlip;\n    var vFlip = props.vFlip;\n    var rotation = props.rotate;\n    if (hFlip) {\n      if (vFlip) {\n        rotation += 2;\n      } else {\n        transformations.push(\"translate(\" + (box.width + box.left).toString() + \" \" + (0 - box.top).toString() + \")\");\n        transformations.push(\"scale(-1 1)\");\n        box.top = box.left = 0;\n      }\n    } else if (vFlip) {\n      transformations.push(\"translate(\" + (0 - box.left).toString() + \" \" + (box.height + box.top).toString() + \")\");\n      transformations.push(\"scale(1 -1)\");\n      box.top = box.left = 0;\n    }\n    var tempValue;\n    if (rotation < 0) {\n      rotation -= Math.floor(rotation / 4) * 4;\n    }\n    rotation = rotation % 4;\n    switch (rotation) {\n      case 1:\n        tempValue = box.height / 2 + box.top;\n        transformations.unshift(\"rotate(90 \" + tempValue.toString() + \" \" + tempValue.toString() + \")\");\n        break;\n      case 2:\n        transformations.unshift(\"rotate(180 \" + (box.width / 2 + box.left).toString() + \" \" + (box.height / 2 + box.top).toString() + \")\");\n        break;\n      case 3:\n        tempValue = box.width / 2 + box.left;\n        transformations.unshift(\"rotate(-90 \" + tempValue.toString() + \" \" + tempValue.toString() + \")\");\n        break;\n    }\n    if (rotation % 2 === 1) {\n      if (box.left !== box.top) {\n        tempValue = box.left;\n        box.left = box.top;\n        box.top = tempValue;\n      }\n      if (box.width !== box.height) {\n        tempValue = box.width;\n        box.width = box.height;\n        box.height = tempValue;\n      }\n    }\n    if (transformations.length) {\n      body = wrapSVGContent(body, '<g transform=\"' + transformations.join(\" \") + '\">', \"</g>\");\n    }\n  });\n  var customisationsWidth = fullCustomisations.width;\n  var customisationsHeight = fullCustomisations.height;\n  var boxWidth = box.width;\n  var boxHeight = box.height;\n  var width;\n  var height;\n  if (customisationsWidth === null) {\n    height = customisationsHeight === null ? \"1em\" : customisationsHeight === \"auto\" ? boxHeight : customisationsHeight;\n    width = calculateSize(height, boxWidth / boxHeight);\n  } else {\n    width = customisationsWidth === \"auto\" ? boxWidth : customisationsWidth;\n    height = customisationsHeight === null ? calculateSize(width, boxHeight / boxWidth) : customisationsHeight === \"auto\" ? boxHeight : customisationsHeight;\n  }\n  var attributes = {};\n  var setAttr = function setAttr(prop, value) {\n    if (!isUnsetKeyword(value)) {\n      attributes[prop] = value.toString();\n    }\n  };\n  setAttr(\"width\", width);\n  setAttr(\"height\", height);\n  var viewBox = [box.left, box.top, boxWidth, boxHeight];\n  attributes.viewBox = viewBox.join(\" \");\n  return {\n    attributes: attributes,\n    viewBox: viewBox,\n    body: body\n  };\n}\nvar regex = /\\sid=\"(\\S+)\"/g;\nvar randomPrefix = \"IconifyId\" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);\nvar counter = 0;\nfunction replaceIDs(body) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : randomPrefix;\n  var ids = [];\n  var match;\n  while (match = regex.exec(body)) {\n    ids.push(match[1]);\n  }\n  if (!ids.length) {\n    return body;\n  }\n  var suffix = \"suffix\" + (Math.random() * 16777216 | Date.now()).toString(16);\n  ids.forEach(function (id) {\n    var newID = typeof prefix === \"function\" ? prefix(id) : prefix + (counter++).toString();\n    var escapedID = id.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    body = body.replace(\n    // Allowed characters before id: [#;\"]\n    // Allowed characters after id: [)\"], .[a-z]\n    new RegExp('([#;\"])(' + escapedID + ')([\")]|\\\\.[a-z])', \"g\"), \"$1\" + newID + suffix + \"$3\");\n  });\n  body = body.replace(new RegExp(suffix, \"g\"), \"\");\n  return body;\n}\nvar storage = /* @__PURE__ */Object.create(null);\nfunction setAPIModule(provider, item) {\n  storage[provider] = item;\n}\nfunction getAPIModule(provider) {\n  return storage[provider] || storage[\"\"];\n}\nfunction createAPIConfig(source) {\n  var resources;\n  if (typeof source.resources === \"string\") {\n    resources = [source.resources];\n  } else {\n    resources = source.resources;\n    if (!(resources instanceof Array) || !resources.length) {\n      return null;\n    }\n  }\n  var result = {\n    // API hosts\n    resources: resources,\n    // Root path\n    path: source.path || \"/\",\n    // URL length limit\n    maxURL: source.maxURL || 500,\n    // Timeout before next host is used.\n    rotate: source.rotate || 750,\n    // Timeout before failing query.\n    timeout: source.timeout || 5e3,\n    // Randomise default API end point.\n    random: source.random === true,\n    // Start index\n    index: source.index || 0,\n    // Receive data after time out (used if time out kicks in first, then API module sends data anyway).\n    dataAfterTimeout: source.dataAfterTimeout !== false\n  };\n  return result;\n}\nvar configStorage = /* @__PURE__ */Object.create(null);\nvar fallBackAPISources = [\"https://api.simplesvg.com\", \"https://api.unisvg.com\"];\nvar fallBackAPI = [];\nwhile (fallBackAPISources.length > 0) {\n  if (fallBackAPISources.length === 1) {\n    fallBackAPI.push(fallBackAPISources.shift());\n  } else {\n    if (Math.random() > 0.5) {\n      fallBackAPI.push(fallBackAPISources.shift());\n    } else {\n      fallBackAPI.push(fallBackAPISources.pop());\n    }\n  }\n}\nconfigStorage[\"\"] = createAPIConfig({\n  resources: [\"https://api.iconify.design\"].concat(fallBackAPI)\n});\nfunction addAPIProvider(provider, customConfig) {\n  var config = createAPIConfig(customConfig);\n  if (config === null) {\n    return false;\n  }\n  configStorage[provider] = config;\n  return true;\n}\nfunction getAPIConfig(provider) {\n  return configStorage[provider];\n}\nfunction listAPIProviders() {\n  return Object.keys(configStorage);\n}\nvar detectFetch = function detectFetch() {\n  var callback;\n  try {\n    callback = fetch;\n    if (typeof callback === \"function\") {\n      return callback;\n    }\n  } catch (err) {}\n};\nvar fetchModule = detectFetch();\nfunction setFetch(fetch2) {\n  fetchModule = fetch2;\n}\nfunction getFetch() {\n  return fetchModule;\n}\nfunction calculateMaxLength(provider, prefix) {\n  var config = getAPIConfig(provider);\n  if (!config) {\n    return 0;\n  }\n  var result;\n  if (!config.maxURL) {\n    result = 0;\n  } else {\n    var maxHostLength = 0;\n    config.resources.forEach(function (item) {\n      var host = item;\n      maxHostLength = Math.max(maxHostLength, host.length);\n    });\n    var url = prefix + \".json?icons=\";\n    result = config.maxURL - maxHostLength - config.path.length - url.length;\n  }\n  return result;\n}\nfunction shouldAbort(status) {\n  return status === 404;\n}\nvar prepare = function prepare(provider, prefix, icons) {\n  var results = [];\n  var maxLength = calculateMaxLength(provider, prefix);\n  var type = \"icons\";\n  var item = {\n    type: type,\n    provider: provider,\n    prefix: prefix,\n    icons: []\n  };\n  var length = 0;\n  icons.forEach(function (name, index) {\n    length += name.length + 1;\n    if (length >= maxLength && index > 0) {\n      results.push(item);\n      item = {\n        type: type,\n        provider: provider,\n        prefix: prefix,\n        icons: []\n      };\n      length = name.length;\n    }\n    item.icons.push(name);\n  });\n  results.push(item);\n  return results;\n};\nfunction getPath(provider) {\n  if (typeof provider === \"string\") {\n    var config = getAPIConfig(provider);\n    if (config) {\n      return config.path;\n    }\n  }\n  return \"/\";\n}\nvar send = function send(host, params, callback) {\n  if (!fetchModule) {\n    callback(\"abort\", 424);\n    return;\n  }\n  var path = getPath(params.provider);\n  switch (params.type) {\n    case \"icons\":\n      {\n        var prefix = params.prefix;\n        var icons = params.icons;\n        var iconsList = icons.join(\",\");\n        var urlParams = new URLSearchParams({\n          icons: iconsList\n        });\n        path += prefix + \".json?\" + urlParams.toString();\n        break;\n      }\n    case \"custom\":\n      {\n        var uri = params.uri;\n        path += uri.slice(0, 1) === \"/\" ? uri.slice(1) : uri;\n        break;\n      }\n    default:\n      callback(\"abort\", 400);\n      return;\n  }\n  var defaultError = 503;\n  fetchModule(host + path).then(function (response) {\n    var status = response.status;\n    if (status !== 200) {\n      setTimeout(function () {\n        callback(shouldAbort(status) ? \"abort\" : \"next\", status);\n      });\n      return;\n    }\n    defaultError = 501;\n    return response.json();\n  }).then(function (data) {\n    if (_typeof(data) !== \"object\" || data === null) {\n      setTimeout(function () {\n        if (data === 404) {\n          callback(\"abort\", data);\n        } else {\n          callback(\"next\", defaultError);\n        }\n      });\n      return;\n    }\n    setTimeout(function () {\n      callback(\"success\", data);\n    });\n  })[\"catch\"](function () {\n    callback(\"next\", defaultError);\n  });\n};\nvar fetchAPIModule = {\n  prepare: prepare,\n  send: send\n};\nfunction sortIcons(icons) {\n  var result = {\n    loaded: [],\n    missing: [],\n    pending: []\n  };\n  var storage = /* @__PURE__ */Object.create(null);\n  icons.sort(function (a, b) {\n    if (a.provider !== b.provider) {\n      return a.provider.localeCompare(b.provider);\n    }\n    if (a.prefix !== b.prefix) {\n      return a.prefix.localeCompare(b.prefix);\n    }\n    return a.name.localeCompare(b.name);\n  });\n  var lastIcon = {\n    provider: \"\",\n    prefix: \"\",\n    name: \"\"\n  };\n  icons.forEach(function (icon) {\n    if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {\n      return;\n    }\n    lastIcon = icon;\n    var provider = icon.provider;\n    var prefix = icon.prefix;\n    var name = icon.name;\n    var providerStorage = storage[provider] || (storage[provider] = /* @__PURE__ */Object.create(null));\n    var localStorage = providerStorage[prefix] || (providerStorage[prefix] = getStorage(provider, prefix));\n    var list;\n    if (name in localStorage.icons) {\n      list = result.loaded;\n    } else if (prefix === \"\" || localStorage.missing.has(name)) {\n      list = result.missing;\n    } else {\n      list = result.pending;\n    }\n    var item = {\n      provider: provider,\n      prefix: prefix,\n      name: name\n    };\n    list.push(item);\n  });\n  return result;\n}\nfunction removeCallback(storages, id) {\n  storages.forEach(function (storage) {\n    var items = storage.loaderCallbacks;\n    if (items) {\n      storage.loaderCallbacks = items.filter(function (row) {\n        return row.id !== id;\n      });\n    }\n  });\n}\nfunction updateCallbacks(storage) {\n  if (!storage.pendingCallbacksFlag) {\n    storage.pendingCallbacksFlag = true;\n    setTimeout(function () {\n      storage.pendingCallbacksFlag = false;\n      var items = storage.loaderCallbacks ? storage.loaderCallbacks.slice(0) : [];\n      if (!items.length) {\n        return;\n      }\n      var hasPending = false;\n      var provider = storage.provider;\n      var prefix = storage.prefix;\n      items.forEach(function (item) {\n        var icons = item.icons;\n        var oldLength = icons.pending.length;\n        icons.pending = icons.pending.filter(function (icon) {\n          if (icon.prefix !== prefix) {\n            return true;\n          }\n          var name = icon.name;\n          if (storage.icons[name]) {\n            icons.loaded.push({\n              provider: provider,\n              prefix: prefix,\n              name: name\n            });\n          } else if (storage.missing.has(name)) {\n            icons.missing.push({\n              provider: provider,\n              prefix: prefix,\n              name: name\n            });\n          } else {\n            hasPending = true;\n            return true;\n          }\n          return false;\n        });\n        if (icons.pending.length !== oldLength) {\n          if (!hasPending) {\n            removeCallback([storage], item.id);\n          }\n          item.callback(icons.loaded.slice(0), icons.missing.slice(0), icons.pending.slice(0), item.abort);\n        }\n      });\n    });\n  }\n}\nvar idCounter = 0;\nfunction storeCallback(callback, icons, pendingSources) {\n  var id = idCounter++;\n  var abort = removeCallback.bind(null, pendingSources, id);\n  if (!icons.pending.length) {\n    return abort;\n  }\n  var item = {\n    id: id,\n    icons: icons,\n    callback: callback,\n    abort: abort\n  };\n  pendingSources.forEach(function (storage) {\n    (storage.loaderCallbacks || (storage.loaderCallbacks = [])).push(item);\n  });\n  return abort;\n}\nfunction listToIcons(list) {\n  var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var simpleNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var result = [];\n  list.forEach(function (item) {\n    var icon = typeof item === \"string\" ? stringToIcon(item, validate, simpleNames) : item;\n    if (icon) {\n      result.push(icon);\n    }\n  });\n  return result;\n}\n\n// src/config.ts\nvar defaultConfig = {\n  resources: [],\n  index: 0,\n  timeout: 2e3,\n  rotate: 750,\n  random: false,\n  dataAfterTimeout: false\n};\n\n// src/query.ts\nfunction sendQuery(config, payload, query, done) {\n  var resourcesCount = config.resources.length;\n  var startIndex = config.random ? Math.floor(Math.random() * resourcesCount) : config.index;\n  var resources;\n  if (config.random) {\n    var list = config.resources.slice(0);\n    resources = [];\n    while (list.length > 1) {\n      var nextIndex = Math.floor(Math.random() * list.length);\n      resources.push(list[nextIndex]);\n      list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));\n    }\n    resources = resources.concat(list);\n  } else {\n    resources = config.resources.slice(startIndex).concat(config.resources.slice(0, startIndex));\n  }\n  var startTime = Date.now();\n  var status = \"pending\";\n  var queriesSent = 0;\n  var lastError;\n  var timer = null;\n  var queue = [];\n  var doneCallbacks = [];\n  if (typeof done === \"function\") {\n    doneCallbacks.push(done);\n  }\n  function resetTimer() {\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n  }\n  function abort() {\n    if (status === \"pending\") {\n      status = \"aborted\";\n    }\n    resetTimer();\n    queue.forEach(function (item) {\n      if (item.status === \"pending\") {\n        item.status = \"aborted\";\n      }\n    });\n    queue = [];\n  }\n  function subscribe(callback, overwrite) {\n    if (overwrite) {\n      doneCallbacks = [];\n    }\n    if (typeof callback === \"function\") {\n      doneCallbacks.push(callback);\n    }\n  }\n  function getQueryStatus() {\n    return {\n      startTime: startTime,\n      payload: payload,\n      status: status,\n      queriesSent: queriesSent,\n      queriesPending: queue.length,\n      subscribe: subscribe,\n      abort: abort\n    };\n  }\n  function failQuery() {\n    status = \"failed\";\n    doneCallbacks.forEach(function (callback) {\n      callback(void 0, lastError);\n    });\n  }\n  function clearQueue() {\n    queue.forEach(function (item) {\n      if (item.status === \"pending\") {\n        item.status = \"aborted\";\n      }\n    });\n    queue = [];\n  }\n  function moduleResponse(item, response, data) {\n    var isError = response !== \"success\";\n    queue = queue.filter(function (queued) {\n      return queued !== item;\n    });\n    switch (status) {\n      case \"pending\":\n        break;\n      case \"failed\":\n        if (isError || !config.dataAfterTimeout) {\n          return;\n        }\n        break;\n      default:\n        return;\n    }\n    if (response === \"abort\") {\n      lastError = data;\n      failQuery();\n      return;\n    }\n    if (isError) {\n      lastError = data;\n      if (!queue.length) {\n        if (!resources.length) {\n          failQuery();\n        } else {\n          execNext();\n        }\n      }\n      return;\n    }\n    resetTimer();\n    clearQueue();\n    if (!config.random) {\n      var index = config.resources.indexOf(item.resource);\n      if (index !== -1 && index !== config.index) {\n        config.index = index;\n      }\n    }\n    status = \"completed\";\n    doneCallbacks.forEach(function (callback) {\n      callback(data);\n    });\n  }\n  function execNext() {\n    if (status !== \"pending\") {\n      return;\n    }\n    resetTimer();\n    var resource = resources.shift();\n    if (resource === void 0) {\n      if (queue.length) {\n        timer = setTimeout(function () {\n          resetTimer();\n          if (status === \"pending\") {\n            clearQueue();\n            failQuery();\n          }\n        }, config.timeout);\n        return;\n      }\n      failQuery();\n      return;\n    }\n    var item = {\n      status: \"pending\",\n      resource: resource,\n      callback: function callback(status2, data) {\n        moduleResponse(item, status2, data);\n      }\n    };\n    queue.push(item);\n    queriesSent++;\n    timer = setTimeout(execNext, config.rotate);\n    query(resource, payload, item.callback);\n  }\n  setTimeout(execNext);\n  return getQueryStatus;\n}\n\n// src/index.ts\nfunction initRedundancy(cfg) {\n  var config = _objectSpread(_objectSpread({}, defaultConfig), cfg);\n  var queries = [];\n  function cleanup() {\n    queries = queries.filter(function (item) {\n      return item().status === \"pending\";\n    });\n  }\n  function query(payload, queryCallback, doneCallback) {\n    var query2 = sendQuery(config, payload, queryCallback, function (data, error) {\n      cleanup();\n      if (doneCallback) {\n        doneCallback(data, error);\n      }\n    });\n    queries.push(query2);\n    return query2;\n  }\n  function find(callback) {\n    return queries.find(function (value) {\n      return callback(value);\n    }) || null;\n  }\n  var instance = {\n    query: query,\n    find: find,\n    setIndex: function setIndex(index) {\n      config.index = index;\n    },\n    getIndex: function getIndex() {\n      return config.index;\n    },\n    cleanup: cleanup\n  };\n  return instance;\n}\nfunction emptyCallback$1() {}\nvar redundancyCache = /* @__PURE__ */Object.create(null);\nfunction getRedundancyCache(provider) {\n  if (!redundancyCache[provider]) {\n    var config = getAPIConfig(provider);\n    if (!config) {\n      return;\n    }\n    var redundancy = initRedundancy(config);\n    var cachedReundancy = {\n      config: config,\n      redundancy: redundancy\n    };\n    redundancyCache[provider] = cachedReundancy;\n  }\n  return redundancyCache[provider];\n}\nfunction sendAPIQuery(target, query, callback) {\n  var redundancy;\n  var send;\n  if (typeof target === \"string\") {\n    var api = getAPIModule(target);\n    if (!api) {\n      callback(void 0, 424);\n      return emptyCallback$1;\n    }\n    send = api.send;\n    var cached = getRedundancyCache(target);\n    if (cached) {\n      redundancy = cached.redundancy;\n    }\n  } else {\n    var config = createAPIConfig(target);\n    if (config) {\n      redundancy = initRedundancy(config);\n      var moduleKey = target.resources ? target.resources[0] : \"\";\n      var _api2 = getAPIModule(moduleKey);\n      if (_api2) {\n        send = _api2.send;\n      }\n    }\n  }\n  if (!redundancy || !send) {\n    callback(void 0, 424);\n    return emptyCallback$1;\n  }\n  return redundancy.query(query, send, callback)().abort;\n}\nvar browserCacheVersion = \"iconify2\";\nvar browserCachePrefix = \"iconify\";\nvar browserCacheCountKey = browserCachePrefix + \"-count\";\nvar browserCacheVersionKey = browserCachePrefix + \"-version\";\nvar browserStorageHour = 36e5;\nvar browserStorageCacheExpiration = 168;\nvar browserStorageLimit = 50;\nfunction getStoredItem(func, key) {\n  try {\n    return func.getItem(key);\n  } catch (err) {}\n}\nfunction setStoredItem(func, key, value) {\n  try {\n    func.setItem(key, value);\n    return true;\n  } catch (err) {}\n}\nfunction removeStoredItem(func, key) {\n  try {\n    func.removeItem(key);\n  } catch (err) {}\n}\nfunction setBrowserStorageItemsCount(storage, value) {\n  return setStoredItem(storage, browserCacheCountKey, value.toString());\n}\nfunction getBrowserStorageItemsCount(storage) {\n  return parseInt(getStoredItem(storage, browserCacheCountKey)) || 0;\n}\nvar browserStorageConfig = {\n  local: true,\n  session: true\n};\nvar browserStorageEmptyItems = {\n  local: /* @__PURE__ */new Set(),\n  session: /* @__PURE__ */new Set()\n};\nvar browserStorageStatus = false;\nfunction setBrowserStorageStatus(status) {\n  browserStorageStatus = status;\n}\nvar _window = typeof window === \"undefined\" ? {} : window;\nfunction getBrowserStorage(key) {\n  var attr = key + \"Storage\";\n  try {\n    if (_window && _window[attr] && typeof _window[attr].length === \"number\") {\n      return _window[attr];\n    }\n  } catch (err) {}\n  browserStorageConfig[key] = false;\n}\nfunction iterateBrowserStorage(key, callback) {\n  var func = getBrowserStorage(key);\n  if (!func) {\n    return;\n  }\n  var version = getStoredItem(func, browserCacheVersionKey);\n  if (version !== browserCacheVersion) {\n    if (version) {\n      var total2 = getBrowserStorageItemsCount(func);\n      for (var i = 0; i < total2; i++) {\n        removeStoredItem(func, browserCachePrefix + i.toString());\n      }\n    }\n    setStoredItem(func, browserCacheVersionKey, browserCacheVersion);\n    setBrowserStorageItemsCount(func, 0);\n    return;\n  }\n  var minTime = Math.floor(Date.now() / browserStorageHour) - browserStorageCacheExpiration;\n  var parseItem = function parseItem(index) {\n    var name = browserCachePrefix + index.toString();\n    var item = getStoredItem(func, name);\n    if (typeof item !== \"string\") {\n      return;\n    }\n    try {\n      var data = JSON.parse(item);\n      if (_typeof(data) === \"object\" && typeof data.cached === \"number\" && data.cached > minTime && typeof data.provider === \"string\" && _typeof(data.data) === \"object\" && typeof data.data.prefix === \"string\" &&\n      // Valid item: run callback\n      callback(data, index)) {\n        return true;\n      }\n    } catch (err) {}\n    removeStoredItem(func, name);\n  };\n  var total = getBrowserStorageItemsCount(func);\n  for (var _i = total - 1; _i >= 0; _i--) {\n    if (!parseItem(_i)) {\n      if (_i === total - 1) {\n        total--;\n        setBrowserStorageItemsCount(func, total);\n      } else {\n        browserStorageEmptyItems[key].add(_i);\n      }\n    }\n  }\n}\nfunction initBrowserStorage() {\n  if (browserStorageStatus) {\n    return;\n  }\n  setBrowserStorageStatus(true);\n  for (var key in browserStorageConfig) {\n    iterateBrowserStorage(key, function (item) {\n      var iconSet = item.data;\n      var provider = item.provider;\n      var prefix = iconSet.prefix;\n      var storage = getStorage(provider, prefix);\n      if (!addIconSet(storage, iconSet).length) {\n        return false;\n      }\n      var lastModified = iconSet.lastModified || -1;\n      storage.lastModifiedCached = storage.lastModifiedCached ? Math.min(storage.lastModifiedCached, lastModified) : lastModified;\n      return true;\n    });\n  }\n}\nfunction updateLastModified(storage, lastModified) {\n  var lastValue = storage.lastModifiedCached;\n  if (\n  // Matches or newer\n  lastValue && lastValue >= lastModified) {\n    return lastValue === lastModified;\n  }\n  storage.lastModifiedCached = lastModified;\n  if (lastValue) {\n    for (var key in browserStorageConfig) {\n      iterateBrowserStorage(key, function (item) {\n        var iconSet = item.data;\n        return item.provider !== storage.provider || iconSet.prefix !== storage.prefix || iconSet.lastModified === lastModified;\n      });\n    }\n  }\n  return true;\n}\nfunction storeInBrowserStorage(storage, data) {\n  if (!browserStorageStatus) {\n    initBrowserStorage();\n  }\n  function store(key) {\n    var func;\n    if (!browserStorageConfig[key] || !(func = getBrowserStorage(key))) {\n      return;\n    }\n    var set = browserStorageEmptyItems[key];\n    var index;\n    if (set.size) {\n      set[\"delete\"](index = Array.from(set).shift());\n    } else {\n      index = getBrowserStorageItemsCount(func);\n      if (index >= browserStorageLimit || !setBrowserStorageItemsCount(func, index + 1)) {\n        return;\n      }\n    }\n    var item = {\n      cached: Math.floor(Date.now() / browserStorageHour),\n      provider: storage.provider,\n      data: data\n    };\n    return setStoredItem(func, browserCachePrefix + index.toString(), JSON.stringify(item));\n  }\n  if (data.lastModified && !updateLastModified(storage, data.lastModified)) {\n    return;\n  }\n  if (!Object.keys(data.icons).length) {\n    return;\n  }\n  if (data.not_found) {\n    data = Object.assign({}, data);\n    delete data.not_found;\n  }\n  if (!store(\"local\")) {\n    store(\"session\");\n  }\n}\nfunction emptyCallback() {}\nfunction loadedNewIcons(storage) {\n  if (!storage.iconsLoaderFlag) {\n    storage.iconsLoaderFlag = true;\n    setTimeout(function () {\n      storage.iconsLoaderFlag = false;\n      updateCallbacks(storage);\n    });\n  }\n}\nfunction loadNewIcons(storage, icons) {\n  if (!storage.iconsToLoad) {\n    storage.iconsToLoad = icons;\n  } else {\n    storage.iconsToLoad = storage.iconsToLoad.concat(icons).sort();\n  }\n  if (!storage.iconsQueueFlag) {\n    storage.iconsQueueFlag = true;\n    setTimeout(function () {\n      storage.iconsQueueFlag = false;\n      var provider = storage.provider,\n        prefix = storage.prefix;\n      var icons2 = storage.iconsToLoad;\n      delete storage.iconsToLoad;\n      var api;\n      if (!icons2 || !(api = getAPIModule(provider))) {\n        return;\n      }\n      var params = api.prepare(provider, prefix, icons2);\n      params.forEach(function (item) {\n        sendAPIQuery(provider, item, function (data) {\n          if (_typeof(data) !== \"object\") {\n            item.icons.forEach(function (name) {\n              storage.missing.add(name);\n            });\n          } else {\n            try {\n              var parsed = addIconSet(storage, data);\n              if (!parsed.length) {\n                return;\n              }\n              var pending = storage.pendingIcons;\n              if (pending) {\n                parsed.forEach(function (name) {\n                  pending[\"delete\"](name);\n                });\n              }\n              storeInBrowserStorage(storage, data);\n            } catch (err) {\n              console.error(err);\n            }\n          }\n          loadedNewIcons(storage);\n        });\n      });\n    });\n  }\n}\nvar loadIcons = function loadIcons(icons, callback) {\n  var cleanedIcons = listToIcons(icons, true, allowSimpleNames());\n  var sortedIcons = sortIcons(cleanedIcons);\n  if (!sortedIcons.pending.length) {\n    var callCallback = true;\n    if (callback) {\n      setTimeout(function () {\n        if (callCallback) {\n          callback(sortedIcons.loaded, sortedIcons.missing, sortedIcons.pending, emptyCallback);\n        }\n      });\n    }\n    return function () {\n      callCallback = false;\n    };\n  }\n  var newIcons = /* @__PURE__ */Object.create(null);\n  var sources = [];\n  var lastProvider, lastPrefix;\n  sortedIcons.pending.forEach(function (icon) {\n    var provider = icon.provider,\n      prefix = icon.prefix;\n    if (prefix === lastPrefix && provider === lastProvider) {\n      return;\n    }\n    lastProvider = provider;\n    lastPrefix = prefix;\n    sources.push(getStorage(provider, prefix));\n    var providerNewIcons = newIcons[provider] || (newIcons[provider] = /* @__PURE__ */Object.create(null));\n    if (!providerNewIcons[prefix]) {\n      providerNewIcons[prefix] = [];\n    }\n  });\n  sortedIcons.pending.forEach(function (icon) {\n    var provider = icon.provider,\n      prefix = icon.prefix,\n      name = icon.name;\n    var storage = getStorage(provider, prefix);\n    var pendingQueue = storage.pendingIcons || (storage.pendingIcons = /* @__PURE__ */new Set());\n    if (!pendingQueue.has(name)) {\n      pendingQueue.add(name);\n      newIcons[provider][prefix].push(name);\n    }\n  });\n  sources.forEach(function (storage) {\n    var provider = storage.provider,\n      prefix = storage.prefix;\n    if (newIcons[provider][prefix].length) {\n      loadNewIcons(storage, newIcons[provider][prefix]);\n    }\n  });\n  return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;\n};\nvar loadIcon = function loadIcon(icon) {\n  return new Promise(function (fulfill, reject) {\n    var iconObj = typeof icon === \"string\" ? stringToIcon(icon, true) : icon;\n    if (!iconObj) {\n      reject(icon);\n      return;\n    }\n    loadIcons([iconObj || icon], function (loaded) {\n      if (loaded.length && iconObj) {\n        var data = getIconData(iconObj);\n        if (data) {\n          fulfill(_objectSpread(_objectSpread({}, defaultIconProps), data));\n          return;\n        }\n      }\n      reject(icon);\n    });\n  });\n};\nfunction toggleBrowserCache(storage, value) {\n  switch (storage) {\n    case \"local\":\n    case \"session\":\n      browserStorageConfig[storage] = value;\n      break;\n    case \"all\":\n      for (var key in browserStorageConfig) {\n        browserStorageConfig[key] = value;\n      }\n      break;\n  }\n}\nfunction mergeCustomisations(defaults, item) {\n  var result = _objectSpread({}, defaults);\n  for (var key in item) {\n    var value = item[key];\n    var valueType = _typeof(value);\n    if (key in defaultIconSizeCustomisations) {\n      if (value === null || value && (valueType === \"string\" || valueType === \"number\")) {\n        result[key] = value;\n      }\n    } else if (valueType === _typeof(result[key])) {\n      result[key] = key === \"rotate\" ? value % 4 : value;\n    }\n  }\n  return result;\n}\nvar separator = /[\\s,]+/;\nfunction flipFromString(custom, flip) {\n  flip.split(separator).forEach(function (str) {\n    var value = str.trim();\n    switch (value) {\n      case \"horizontal\":\n        custom.hFlip = true;\n        break;\n      case \"vertical\":\n        custom.vFlip = true;\n        break;\n    }\n  });\n}\nfunction rotateFromString(value) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var units = value.replace(/^-?[0-9.]*/, \"\");\n  function cleanup(value2) {\n    while (value2 < 0) {\n      value2 += 4;\n    }\n    return value2 % 4;\n  }\n  if (units === \"\") {\n    var num = parseInt(value);\n    return isNaN(num) ? 0 : cleanup(num);\n  } else if (units !== value) {\n    var split = 0;\n    switch (units) {\n      case \"%\":\n        split = 25;\n        break;\n      case \"deg\":\n        split = 90;\n    }\n    if (split) {\n      var _num = parseFloat(value.slice(0, value.length - units.length));\n      if (isNaN(_num)) {\n        return 0;\n      }\n      _num = _num / split;\n      return _num % 1 === 0 ? cleanup(_num) : 0;\n    }\n  }\n  return defaultValue;\n}\nfunction iconToHTML(body, attributes) {\n  var renderAttribsHTML = body.indexOf(\"xlink:\") === -1 ? \"\" : ' xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n  for (var attr in attributes) {\n    renderAttribsHTML += \" \" + attr + '=\"' + attributes[attr] + '\"';\n  }\n  return '<svg xmlns=\"http://www.w3.org/2000/svg\"' + renderAttribsHTML + \">\" + body + \"</svg>\";\n}\nfunction encodeSVGforURL(svg) {\n  return svg.replace(/\"/g, \"'\").replace(/%/g, \"%25\").replace(/#/g, \"%23\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\").replace(/\\s+/g, \" \");\n}\nfunction svgToData(svg) {\n  return \"data:image/svg+xml,\" + encodeSVGforURL(svg);\n}\nfunction svgToURL(svg) {\n  return 'url(\"' + svgToData(svg) + '\")';\n}\nvar policy;\nfunction createPolicy() {\n  try {\n    policy = window.trustedTypes.createPolicy(\"iconify\", {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      createHTML: function createHTML(s) {\n        return s;\n      }\n    });\n  } catch (err) {\n    policy = null;\n  }\n}\nfunction cleanUpInnerHTML(html) {\n  if (policy === void 0) {\n    createPolicy();\n  }\n  return policy ? policy.createHTML(html) : html;\n}\nvar defaultExtendedIconCustomisations = _objectSpread(_objectSpread({}, defaultIconCustomisations), {}, {\n  inline: false\n});\n\n/**\n * Default SVG attributes\n */\nvar svgDefaults = {\n  'xmlns': 'http://www.w3.org/2000/svg',\n  'xmlnsXlink': 'http://www.w3.org/1999/xlink',\n  'aria-hidden': true,\n  'role': 'img'\n};\n/**\n * Style modes\n */\nvar commonProps = {\n  display: 'inline-block'\n};\nvar monotoneProps = {\n  backgroundColor: 'currentColor'\n};\nvar coloredProps = {\n  backgroundColor: 'transparent'\n};\n// Dynamically add common props to variables above\nvar propsToAdd = {\n  Image: 'var(--svg)',\n  Repeat: 'no-repeat',\n  Size: '100% 100%'\n};\nvar propsToAddTo = {\n  WebkitMask: monotoneProps,\n  mask: monotoneProps,\n  background: coloredProps\n};\nfor (var prefix in propsToAddTo) {\n  var list = propsToAddTo[prefix];\n  for (var prop in propsToAdd) {\n    list[prefix + prop] = propsToAdd[prop];\n  }\n}\n/**\n * Default values for customisations for inline icon\n */\nvar inlineDefaults = _objectSpread(_objectSpread({}, defaultExtendedIconCustomisations), {}, {\n  inline: true\n});\n/**\n * Fix size: add 'px' to numbers\n */\nfunction fixSize(value) {\n  return value + (value.match(/^[-0-9.]+$/) ? 'px' : '');\n}\n/**\n * Render icon\n */\nvar render = function render(\n// Icon must be validated before calling this function\nicon,\n// Partial properties\nprops,\n// Icon name\nname) {\n  // Get default properties\n  var defaultProps = props.inline ? inlineDefaults : defaultExtendedIconCustomisations;\n  // Get all customisations\n  var customisations = mergeCustomisations(defaultProps, props);\n  // Check mode\n  var mode = props.mode || 'svg';\n  // Create style\n  var style = {};\n  var customStyle = props.style || {};\n  // Create SVG component properties\n  var componentProps = _objectSpread({}, mode === 'svg' ? svgDefaults : {});\n  if (name) {\n    var iconName = stringToIcon(name, false, true);\n    if (iconName) {\n      var classNames = ['iconify'];\n      var _props = ['provider', 'prefix'];\n      for (var _i2 = 0, _props2 = _props; _i2 < _props2.length; _i2++) {\n        var _prop = _props2[_i2];\n        if (iconName[_prop]) {\n          classNames.push('iconify--' + iconName[_prop]);\n        }\n      }\n      componentProps.className = classNames.join(' ');\n    }\n  }\n  // Get element properties\n  for (var key in props) {\n    var value = props[key];\n    if (value === void 0) {\n      continue;\n    }\n    switch (key) {\n      // Properties to ignore\n      case 'icon':\n      case 'style':\n      case 'children':\n      case 'onLoad':\n      case 'mode':\n      case 'ssr':\n        break;\n      // Forward ref\n      case '_ref':\n        componentProps.ref = value;\n        break;\n      // Merge class names\n      case 'className':\n        componentProps[key] = (componentProps[key] ? componentProps[key] + ' ' : '') + value;\n        break;\n      // Boolean attributes\n      case 'inline':\n      case 'hFlip':\n      case 'vFlip':\n        customisations[key] = value === true || value === 'true' || value === 1;\n        break;\n      // Flip as string: 'horizontal,vertical'\n      case 'flip':\n        if (typeof value === 'string') {\n          flipFromString(customisations, value);\n        }\n        break;\n      // Color: copy to style\n      case 'color':\n        style.color = value;\n        break;\n      // Rotation as string\n      case 'rotate':\n        if (typeof value === 'string') {\n          customisations[key] = rotateFromString(value);\n        } else if (typeof value === 'number') {\n          customisations[key] = value;\n        }\n        break;\n      // Remove aria-hidden\n      case 'ariaHidden':\n      case 'aria-hidden':\n        if (value !== true && value !== 'true') {\n          delete componentProps['aria-hidden'];\n        }\n        break;\n      // Copy missing property if it does not exist in customisations\n      default:\n        if (defaultProps[key] === void 0) {\n          componentProps[key] = value;\n        }\n    }\n  }\n  // Generate icon\n  var item = iconToSVG(icon, customisations);\n  var renderAttribs = item.attributes;\n  // Inline display\n  if (customisations.inline) {\n    style.verticalAlign = '-0.125em';\n  }\n  if (mode === 'svg') {\n    // Add style\n    componentProps.style = _objectSpread(_objectSpread({}, style), customStyle);\n    // Add icon stuff\n    Object.assign(componentProps, renderAttribs);\n    // Counter for ids based on \"id\" property to render icons consistently on server and client\n    var localCounter = 0;\n    var id = props.id;\n    if (typeof id === 'string') {\n      // Convert '-' to '_' to avoid errors in animations\n      id = id.replace(/-/g, '_');\n    }\n    // Add icon stuff\n    componentProps.dangerouslySetInnerHTML = {\n      __html: cleanUpInnerHTML(replaceIDs(item.body, id ? function () {\n        return id + 'ID' + localCounter++;\n      } : 'iconifyReact'))\n    };\n    return createElement('svg', componentProps);\n  }\n  // Render <span> with style\n  var body = icon.body,\n    width = icon.width,\n    height = icon.height;\n  var useMask = mode === 'mask' || (mode === 'bg' ? false : body.indexOf('currentColor') !== -1);\n  // Generate SVG\n  var html = iconToHTML(body, _objectSpread(_objectSpread({}, renderAttribs), {}, {\n    width: width + '',\n    height: height + ''\n  }));\n  // Generate style\n  componentProps.style = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, style), {}, {\n    '--svg': svgToURL(html),\n    'width': fixSize(renderAttribs.width),\n    'height': fixSize(renderAttribs.height)\n  }, commonProps), useMask ? monotoneProps : coloredProps), customStyle);\n  return createElement('span', componentProps);\n};\n\n/**\n * Enable cache\n */\nfunction enableCache(storage) {\n  toggleBrowserCache(storage, true);\n}\n/**\n * Disable cache\n */\nfunction disableCache(storage) {\n  toggleBrowserCache(storage, false);\n}\n/**\n * Initialise stuff\n */\n// Enable short names\nallowSimpleNames(true);\n// Set API module\nsetAPIModule('', fetchAPIModule);\n/**\n * Browser stuff\n */\nif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n  // Set cache and load existing cache\n  initBrowserStorage();\n  var _window2 = window;\n  // Load icons from global \"IconifyPreload\"\n  if (_window2.IconifyPreload !== void 0) {\n    var preload = _window2.IconifyPreload;\n    var err = 'Invalid IconifyPreload syntax.';\n    if (_typeof(preload) === 'object' && preload !== null) {\n      (preload instanceof Array ? preload : [preload]).forEach(function (item) {\n        try {\n          if (\n          // Check if item is an object and not null/array\n          _typeof(item) !== 'object' || item === null || item instanceof Array ||\n          // Check for 'icons' and 'prefix'\n          _typeof(item.icons) !== 'object' || typeof item.prefix !== 'string' ||\n          // Add icon set\n          !addCollection(item)) {\n            console.error(err);\n          }\n        } catch (e) {\n          console.error(err);\n        }\n      });\n    }\n  }\n  // Set API from global \"IconifyProviders\"\n  if (_window2.IconifyProviders !== void 0) {\n    var providers = _window2.IconifyProviders;\n    if (_typeof(providers) === 'object' && providers !== null) {\n      for (var key in providers) {\n        var _err = 'IconifyProviders[' + key + '] is invalid.';\n        try {\n          var value = providers[key];\n          if (_typeof(value) !== 'object' || !value || value.resources === void 0) {\n            continue;\n          }\n          if (!addAPIProvider(key, value)) {\n            console.error(_err);\n          }\n        } catch (e) {\n          console.error(_err);\n        }\n      }\n    }\n  }\n}\nfunction IconComponent(props) {\n  var _useState = useState(!!props.ssr),\n    _useState2 = _slicedToArray(_useState, 2),\n    mounted = _useState2[0],\n    setMounted = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    abort = _useState4[0],\n    setAbort = _useState4[1];\n  // Get initial state\n  function getInitialState(mounted) {\n    if (mounted) {\n      var _name2 = props.icon;\n      if (_typeof(_name2) === 'object') {\n        // Icon as object\n        return {\n          name: '',\n          data: _name2\n        };\n      }\n      var _data = getIconData(_name2);\n      if (_data) {\n        return {\n          name: _name2,\n          data: _data\n        };\n      }\n    }\n    return {\n      name: ''\n    };\n  }\n  var _useState5 = useState(getInitialState(!!props.ssr)),\n    _useState6 = _slicedToArray(_useState5, 2),\n    state = _useState6[0],\n    setState = _useState6[1];\n  // Cancel loading\n  function cleanup() {\n    var callback = abort.callback;\n    if (callback) {\n      callback();\n      setAbort({});\n    }\n  }\n  // Change state if it is different\n  function changeState(newState) {\n    if (JSON.stringify(state) !== JSON.stringify(newState)) {\n      cleanup();\n      setState(newState);\n      return true;\n    }\n  }\n  // Update state\n  function updateState() {\n    var _a;\n    var name = props.icon;\n    if (_typeof(name) === 'object') {\n      // Icon as object\n      changeState({\n        name: '',\n        data: name\n      });\n      return;\n    }\n    // New icon or got icon data\n    var data = getIconData(name);\n    if (changeState({\n      name: name,\n      data: data\n    })) {\n      if (data === undefined) {\n        // Load icon, update state when done\n        var callback = loadIcons([name], updateState);\n        setAbort({\n          callback: callback\n        });\n      } else if (data) {\n        // Icon data is available: trigger onLoad callback if present\n        (_a = props.onLoad) === null || _a === void 0 ? void 0 : _a.call(props, name);\n      }\n    }\n  }\n  // Mounted state, cleanup for loader\n  useEffect(function () {\n    setMounted(true);\n    return cleanup;\n  }, []);\n  // Icon changed or component mounted\n  useEffect(function () {\n    if (mounted) {\n      updateState();\n    }\n  }, [props.icon, mounted]);\n  // Render icon\n  var name = state.name,\n    data = state.data;\n  if (!data) {\n    return props.children ? props.children : createElement('span', {});\n  }\n  return render(_objectSpread(_objectSpread({}, defaultIconProps), data), props, name);\n}\n/**\n * Block icon\n *\n * @param props - Component properties\n */\nvar Icon = forwardRef(function (props, ref) {\n  return IconComponent(_objectSpread(_objectSpread({}, props), {}, {\n    _ref: ref\n  }));\n});\n/**\n * Inline icon (has negative verticalAlign that makes it behave like icon font)\n *\n * @param props - Component properties\n */\nvar InlineIcon = forwardRef(function (props, ref) {\n  return IconComponent(_objectSpread(_objectSpread({\n    inline: true\n  }, props), {}, {\n    _ref: ref\n  }));\n});\n/**\n * Internal API\n */\nvar _api = {\n  getAPIConfig: getAPIConfig,\n  setAPIModule: setAPIModule,\n  sendAPIQuery: sendAPIQuery,\n  setFetch: setFetch,\n  getFetch: getFetch,\n  listAPIProviders: listAPIProviders\n};\nexport { Icon, InlineIcon, _api, addAPIProvider, addCollection, addIcon, iconToSVG as buildIcon, calculateSize, disableCache, enableCache, getIcon, iconLoaded as iconExists, iconLoaded, listIcons, loadIcon, loadIcons, replaceIDs };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}